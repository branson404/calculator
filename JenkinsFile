pipeline {
    agent any

    tools {
        // Install the Maven version configured as "maven" and add it to the path.
        maven "maven"
    }

    environment {
        DOCKER_IMAGE = "branson404/calculator"
    }

    stages {

        stage('Checkout') {
            steps {
                // Clone using SSH
                git branch: 'main', 
                    credentialsId: 'github-jenkins-id-rsa-private-key', 
                    url: 'git@github.com:branson404/calculator.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
                // Build with Maven
                // sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('MySonarQube') {
                  sh "mvn clean verify sonar:sonar -Dsonar.projectKey=calculator -Dsonar.projectName='calculator'"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhubCred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE
                    """
                }
            }
        }

        // Optional: Run container
        stage('Run Container') {
            steps {
                sh '''
                    if [ '$(docker ps -a -q -f name=main_image )' ]; then
                        docker rm -f main_image
                    fi
                '''
                sh 'docker run -d -p 8000:8080 --name main_image $DOCKER_IMAGE'
            }
        }
        
    }
    post {
        // If Maven was able to run the tests, even if some of the test
        // failed, record the test results and archive the jar file.
        success {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar'
        }
    }
}
