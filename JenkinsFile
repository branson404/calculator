pipeline {
    agent any
    tools {
        maven "maven"
    }
    environment {
        VERSION = "0.${BUILD_NUMBER}.0"
        DOCKER_REPO = "branson404/calculator"
        DOCKER_TAG = "${DOCKER_REPO}:${BUILD_NUMBER}"
        S3_BUCKET = "kops-branson-storage" 
        S3_REGION = "us-east-1"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-jenkins-id-rsa-private-key',
                    url: 'git@github.com:branson404/calculator.git'
            }
        }
        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
                sh 'mvn test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('MySonarQube') {
                    sh ''' mvn verify sonar:sonar -Dsonar.projectKey=calculator -Dsonar.projectName='calculator' -Dsonar.qualitygate.wait='true' -Dsonar.qualitygate.timeout='300' 
                    '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhubCred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
                sh 'docker build -t $DOCKER_TAG .'
                sh 'docker push $DOCKER_TAG'
                sh 'docker logout'
            }
        }
        stage('Sed Kustomize Artifacts') {
            steps {
                // Change the image tag in the Kustomize deployment file (assuming base/kustomization.yaml exists)
                // This command replaces the existing image tag with the new $DOCKER_TAG
                sh "sed -i 's|image: ${DOCKER_REPO}:.*|image: ${DOCKER_TAG}|g' k8s/base/kustomization.yaml"
                // It's also common to use kustomize edit set image for this:
                // sh "kustomize edit set image ${DOCKER_REPO}=${DOCKER_TAG}"
            }
        }
        stage('Kustomize archive and push to S3') {
            steps {
                // Archive the k8s directory for the CD pipeline to use
                sh 'tar -czf k8s-artifacts.tar.gz k8s'

                // Push the archive to S3 (requires AWS CLI/plugin and credentials)
                // Assuming 'aws-s3-credentials' is a Jenkins Secret Text or File
                withCredentials([aws(credentialsId: 'aws-s3-credentials', roleArn: null, roleSessionName: null)]) {
                    sh "aws s3 cp k8s-artifacts.tar.gz s3://${S3_BUCKET}/calculator/k8s-artifacts/${BUILD_NUMBER}/k8s-artifacts.tar.gz --region ${S3_REGION}"
                }
            }
        }
        stage('Trigger CD Pipeline') {
            steps {
                script {
                    build job: 'cd-calculator-kustomize', parameters: [
                        string(name: 'CI_BUILD', value: "${BUILD_NUMBER}"),
                        string(name: 'VERSION', value: "${VERSION}")
                    ]
                }
            }
        }
    }
    post {
        success {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar'
        }
    }
}
