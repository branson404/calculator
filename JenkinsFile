pipeline {
    agent any

    tools {
        maven "maven"
        java "jdk"
    }

    environment {
        VERSION = "0.${BUILD_NUMBER}.0"
        DOCKER_REPO = "branson404/calculator"
        DOCKER_TAG = "${DOCKER_REPO}:${BUILD_NUMBER}"
        ECR_URI = "286593018608.dkr.ecr.eu-north-1.amazonaws.com"
    }

    stages {
        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh " mvn verify sonar:sonar -Dsonar.projectKey=calculator -Dsonar.projectName='calculator' "
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 5, unit: 'MINUTES') { 
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to SonarQube Quality Gate failure: ${qg.status}"
                        } else {
                            echo "SonarQube Quality Gate passed: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
                sh 'docker build -t $DOCKER_TAG .'
                sh 'docker push $DOCKER_TAG'
            }
        }

        stage('Prepare Helm Artifacts') {
            steps {
                sh """
                    sed -i "s|tag:.*|tag: ${BUILD_NUMBER}|" helm/values.yaml
                    sed -i "s|version:.*|version: ${VERSION}|" helm/Chart.yaml
                    mkdir -p charts
                    helm package helm/ --destination charts/
                """
            }
        }


        stage('Push to ECR') {
            steps {
                sh """
                    aws ecr get-login-password --region eu-north-1 | \
                    helm registry login --username AWS --password-stdin ${ECR_URI}
                    helm push charts/helm-${VERSION}.tgz oci://${ECR_URI}
                """
            }
        }

        stage('Trigger CD Pipeline') {
            steps {
                script {
                    build job: 'helm-deploy', parameters: [
                        string(name: 'CI_BUILD', value: "${BUILD_NUMBER}"),
                        string(name: 'VERSION', value: "${VERSION}")
                    ]
                }
            }
        }
    }

    post {
        success {
            cleanWs()
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar'
        }
    }
}
